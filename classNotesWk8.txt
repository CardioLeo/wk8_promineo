# Author: William Z Chadwick
# Date Created: 09/20/2022
# Date Modified: 09/20/2022
# Description: A place for my in class notes for Promineo Tech Week 8

---

started taking notes later today than usual

research on different kinds of selectors - universal selectors, id selectors, child and parent selectors; element selectors;

point systems:
inline styling
id selectors
class selectors
element selectors
"!important - can be used to override all other denoted styles, you should avoid using !important at all costs, as it can make debugging CSS considerably more difficult. It is better to sort out where styling is coming from rather than resort to !important when dealing with undesirable effects."

^^ makes a lot of sense.

you can use a "specificity calculator" ***

gives you specificity values, 1---through---x

--- hardcoding CSS and HTML right now

later on, we can use JavaScript to change the content and styling dynaically with JavaScript.

---

I asked a question about how dynamic JavaScript use on a Webpage is different from a backend language / server changing the webpage.

architecture of a webpage can be very different in big picture; front-end JS vs backend stuff.

we will discuss this some later in the course, but largely this is outside the scope of this course.

---

html, block elements means block element takes full space available to it unless we give it a length and height, etc. very helpful here...

[hyperlinks are in-line elements, by contrast, since they don't take up maximum space, width, etc.]

and we can use different ids for differnet divs or <p> elements and so that would mean that you could, say, stagger your divs


using CSS block element space changing stuff, you could do something like this:

like the dashes below:


--
----
--
----

could be cool.

---

floats in CSS, aligning text around an image;

floating right, floating left, top, etc.

we don't really use floats, although you should know about it.

---

**********

typography

text, properties and fonts;
font-size, font-weight, color, line-height, text-align, font-family, letter-spacing

"We can also bring in fonts that are not native to a browser through <link> tags in our HTML. Here's an example of what that looks like"

<head>
<link
	href="https://fonts.googleapis.com/css?family=Liu+Jian+Mao+Cao&display=swap"
	rel="stylesheet"
/>
</head>

this is helpful. the browser doesn't support it? well, linking to it, say in Google Fonts, helps the webpage to download the right font and use it in the correct space.

questions about whether you can use just any font whatsoever [I answered it decently]

you can have backup fonts, extra links so that if a font doesn't work another one will kick in. pretty cool.

---

units
[units in CSS]

mockups
[figma? free and paid online, adobe just bought it for $20b]
[adobe going to cloud to upset the ability to crack into the codes for installing adobe. I didn't know that.]

responsive designs
[also, mobile design; applying CSS to design stuff... so not using two separate code bases, one for mobile and one for desktop. But now you can use Media Queries in CSS to use one CSS file ]

mobile first --> tablet --> desktop

"a mobile first approach"

build the CSS for the mobile first

[media queries + id values]

"real estate"
"visual real estate";
"viewport width";
first think about the design for the mobile; then think of the others;

Sarah Schmid comments, "tvs and apple watches add even more devices to think about sometimes :("

good point^

---

media queries

@media (max width=px;) {
	[css styling]
}

phones are getting smaller. they're trying to get us used to this stuff that will be less obtrusive but more "effective" and "powerful" and move us towards more augmented reality stuff. this will give more power to tech designers, etc. --- there's a lot of stuff that needs to be asked and pondered here. "There is so much to say, but not enough time to say it all."

---
side-note:
"cloud structure, cloud engineering, is where the money is" - according to Instructor Frank Stepanski

---

CSS Grid doesn't replace FlexBox, but it works in conjunction with FlexBox.

CSS gif with guy ["family guy?"]trying to open the blinds, haha

things to try to learn?
-
-
-Pseudo Classes
-HTML Box Model

[Vicente Isaguirre says, "freecodecamp has a great project on flexbox" ... "and its cats"]

CSS CheatSheet --> DevHints site
also, Scrimba is good.

---

examples, structure, <header>, <nav>

[Sarah Schmid asks,
"What would be the reason for having more than one css file as the stylesheet?"
Answer from Frank Stepanski:
-if they get really complicated, you may want one CSS file per page;
-also, you may want a different one for both mobile and desktop;
-different team-members may decide to use different css files;]

<header> semantic tag

<main> also semantic tag

<h1>Breads Please!</h1> (but output is capitalized)

css structrue:

top of page: @import url('https://fonts.googleapis.com/css2family=Roboto:wght@1096&display=swap');

html { /* root size */
	font-family: "Roboto", sans-serif;
	font-size: 17px; /* root size */
}

header {
	background-color: #f2f2f2;
	height: 150px;
	display: flex;
	justify-content: center; /* centers horizontally */
	align-items: center;
}

# used to be really hard to center something vertically and horizontall
, especially horizontally

a {
	text-decoration: none;
}

a:hover {
	text-decoration: underline;
	/* you could do font-size: 50px; and this would make it massively enlarge when you hover over it, kinda cool */
}

# wow, that's pretty cool about changing the decoration; also about the font size thing. You could change it lots of ways theoretically. Why has CSS seemed so hard to me in the past? So opaque....

---

"child elements" versus "descendant elements"

---

nav a {
	margin-right: 1rem; /* 1rem == 17px */
}

h1 {
	text-transform: uppercase;
}

main {
	text-align: center;
}

---

ul {
	list-style-type: none; /* removes bullets -- very cool */
	display: flex; /* every line item becomes a flex box item; pretty cool */
	padding: 0;
	margin: 0;
}

table {
	margin: auto; /* centering */

}

# margin can be used to summarize instead of margin left, margin right, top and bottom, etc.

tr:nth-child(even) { /* makes the background color alternate */
	background-color: ;
}

^^^^ also pretty cool

---

end of class notes;
